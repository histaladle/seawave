GLfloat *sidevertices=new GLfloat[3*2*poly+3*2];
GLfloat *sidenormals=new GLfloat[3*2*poly+3*2];
sidevertices[0]=bottomcenter.x()+radius;
sidevertices[1]=bottomcenter.y();
sidevertices[2]=bottomcenter.z();
sidenormals [0]=float(cos(stepangle/2));
sidenormals [1]=0.0;
sidenormals [2]=float(sin(stepangle/2));
sidevertices[3]=topcenter.x()+radius;
sidevertices[4]=topcenter.y();
sidevertices[5]=topcenter.z();
sidenormals [3]=float(cos(stepangle/2));
sidenormals [4]=0.0;
sidenormals [5]=float(sin(stepangle/2));
for(int i=6;i<3*2*poly+3*2;i+=6) {
    sidevertices[i  ]=bottomcenter.x()+float(double(radius)*cos(i/6*stepangle));
    sidevertices[i+1]=bottomcenter.y();
    sidevertices[i+2]=bottomcenter.z()+float(double(radius)*sin(i/6*stepangle));
    sidenormals [i  ]=float(cos(i/6*stepangle-stepangle/2));
    sidenormals [i+1]=0.0;
    sidenormals [i+2]=float(sin(i/6*stepangle-stepangle/2));

    sidevertices[i+3]=topcenter.x()+float(double(radius)*cos(i/6*stepangle));
    sidevertices[i+4]=topcenter.y();
    sidevertices[i+5]=topcenter.z()+float(double(radius)*sin(i/6*stepangle));
    sidenormals [i+3]=float(cos(i/6*stepangle-stepangle/2));
    sidenormals [i+4]=0.0;
    sidenormals [i+5]=float(sin(i/6*stepangle-stepangle/2));
}


//    FT::Complex *rfou=new FT::Complex[row];
//    FT::Complex *cfou=new FT::Complex[column];
//    for(int r=0;r<row;r++) {
//        for(int c=0;c<column;c++) {
//            cfou[c]=spectrum[r*column+c];
//        }
//        FT::discrete(cfou,column,1);
//        for(int c=0;c<column;c++) {
//            surface[r*column+c]=cfou[c];
//        }
//    }
//    for(int c=0;c<column;c++) {
//        for(int r=0;r<row;r++) {
//            rfou[r]=spectrum[r*column+c];
//        }
//        FT::discrete(rfou,row,1);
//        for(int r=0;r<row;r++) {
//            surface[r*column+c]=rfou[r];
//        }
//    }


//    double x=0,z=0;
//    for(int r=0;r<row;r++) {
//        for(int c=0;c<column;c++) {
//            x=(r-row/2)*height/row;
//            z=(c-column/2)*width/column;
//            surface[r*column+c]=FT::Complex(0,0);
//            for(int n=0;n<row;n++) {
//                for(int m=0;m<column;m++) {
//                    kx=(n-row/2)*2*M_PI/height;
//                    kz=(m-column/2)*2*M_PI/width;
//                    FT::Complex factor(cos(kx*x+kz*z),sin(kx*x+kz*z)),delta;
//                    delta=spectrum[n*column+m]*factor;
//                    surface[r*column+c]=surface[r*column+c]+spectrum[n*column+m]*factor;
//                }
//            }
//            qDebug() << "debug92" << r << c << surface[r*column+c].re
//                     << surface[r*column+c].im;
//        }
//    }

for(int i=0;i<row-1;i++) {
    for(int j=0;j<(column-1)*2*3*3;j+=18) {
        QVector3D normal_vec,v[3];
        //[first triangle]
        v[0]=QVector3D(vertice_buffer[i*(column-1)*2*3*3+j   ],vertice_buffer[i*(column-1)*2*3*3+j+ 1],vertice_buffer[i*(column-1)*2*3*3+j+ 2]);
        v[1]=QVector3D(vertice_buffer[i*(column-1)*2*3*3+j+ 3],vertice_buffer[i*(column-1)*2*3*3+j+ 4],vertice_buffer[i*(column-1)*2*3*3+j+ 5]);
        v[2]=QVector3D(vertice_buffer[i*(column-1)*2*3*3+j+ 6],vertice_buffer[i*(column-1)*2*3*3+j+ 7],vertice_buffer[i*(column-1)*2*3*3+j+ 8]);
        normal_vec=QVector3D::normal(v[0],v[1],v[2]);
        normal_buffer[i*(column-1)*2*3*3+j   ]=normal_vec.x();
        normal_buffer[i*(column-1)*2*3*3+j+ 1]=normal_vec.y();
        normal_buffer[i*(column-1)*2*3*3+j+ 2]=normal_vec.z();
        normal_buffer[i*(column-1)*2*3*3+j+ 3]=normal_vec.x();
        normal_buffer[i*(column-1)*2*3*3+j+ 4]=normal_vec.y();
        normal_buffer[i*(column-1)*2*3*3+j+ 5]=normal_vec.z();
        normal_buffer[i*(column-1)*2*3*3+j+ 6]=normal_vec.x();
        normal_buffer[i*(column-1)*2*3*3+j+ 7]=normal_vec.y();
        normal_buffer[i*(column-1)*2*3*3+j+ 8]=normal_vec.z();
        //[second triangle]
        v[0]=QVector3D(vertice_buffer[i*(column-1)*2*3*3+j+ 9],vertice_buffer[i*(column-1)*2*3*3+j+10],vertice_buffer[i*(column-1)*2*3*3+j+11]);
        v[1]=QVector3D(vertice_buffer[i*(column-1)*2*3*3+j+12],vertice_buffer[i*(column-1)*2*3*3+j+13],vertice_buffer[i*(column-1)*2*3*3+j+14]);
        v[2]=QVector3D(vertice_buffer[i*(column-1)*2*3*3+j+15],vertice_buffer[i*(column-1)*2*3*3+j+16],vertice_buffer[i*(column-1)*2*3*3+j+17]);
        normal_vec=QVector3D::normal(v[0],v[1],v[2]);
        normal_buffer[i*(column-1)*2*3*3+j+ 9]=normal_vec.x();
        normal_buffer[i*(column-1)*2*3*3+j+10]=normal_vec.y();
        normal_buffer[i*(column-1)*2*3*3+j+11]=normal_vec.z();
        normal_buffer[i*(column-1)*2*3*3+j+12]=normal_vec.x();
        normal_buffer[i*(column-1)*2*3*3+j+13]=normal_vec.y();
        normal_buffer[i*(column-1)*2*3*3+j+14]=normal_vec.z();
        normal_buffer[i*(column-1)*2*3*3+j+15]=normal_vec.x();
        normal_buffer[i*(column-1)*2*3*3+j+16]=normal_vec.y();
        normal_buffer[i*(column-1)*2*3*3+j+17]=normal_vec.z();
    }
}

//        ++frameCount;
//        fpsTick+=fpsTime.elapsed();
//        fpsTime.restart();
//        if(fpsTick>=1000) {
//            fps=int(1000.0*frameCount/fpsTick);
//            frameCount=0;
//            fpsTick=0;
//        }


QPainter painter(this);
painter.setPen(Qt::white);
painter.drawText(10,30,"fps:"+QString::number(fps));

//cylinder
for(int i=0;i<poly*3*3*2;i+=18) {
    //--------------------------first triangle--------------------------
    sidevertices[i   ]=bottomcenter.x()+float(double(radius)*cos(i/18*stepangle));
    sidevertices[i+ 1]=bottomcenter.y();
    sidevertices[i+ 2]=bottomcenter.z()+float(double(radius)*sin(i/18*stepangle));
    sidenormals [i   ]=float(cos(i/18*stepangle+stepangle/2));
    sidenormals [i+ 1]=0.0;
    sidenormals [i+ 2]=float(sin(i/18*stepangle+stepangle/2));

    sidevertices[i+ 3]=topcenter.x()+float(double(radius)*cos(i/18*stepangle));
    sidevertices[i+ 4]=topcenter.y();
    sidevertices[i+ 5]=topcenter.z()+float(double(radius)*sin(i/18*stepangle));
    sidenormals [i+ 3]=float(cos(i/18*stepangle+stepangle/2));
    sidenormals [i+ 4]=0.0;
    sidenormals [i+ 5]=float(sin(i/18*stepangle+stepangle/2));

    sidevertices[i+ 6]=bottomcenter.x()+float(double(radius)*cos(i/18*stepangle+stepangle));
    sidevertices[i+ 7]=bottomcenter.y();
    sidevertices[i+ 8]=bottomcenter.z()+float(double(radius)*sin(i/18*stepangle+stepangle));
    sidenormals [i+ 6]=float(cos(i/18*stepangle+stepangle/2));
    sidenormals [i+ 7]=0.0;
    sidenormals [i+ 8]=float(sin(i/18*stepangle+stepangle/2));

    //--------------------------second triangle--------------------------
    sidevertices[i+ 9]=bottomcenter.x()+float(double(radius)*cos(i/18*stepangle+stepangle));
    sidevertices[i+10]=bottomcenter.y();
    sidevertices[i+11]=bottomcenter.z()+float(double(radius)*sin(i/18*stepangle+stepangle));
    sidenormals [i+ 9]=float(cos(i/18*stepangle+stepangle/2));
    sidenormals [i+10]=0.0;
    sidenormals [i+11]=float(sin(i/18*stepangle+stepangle/2));

    sidevertices[i+12]=topcenter.x()+float(double(radius)*cos(i/18*stepangle));
    sidevertices[i+13]=topcenter.y();
    sidevertices[i+14]=topcenter.z()+float(double(radius)*sin(i/18*stepangle));
    sidenormals [i+12]=float(cos(i/18*stepangle+stepangle/2));
    sidenormals [i+13]=0.0;
    sidenormals [i+14]=float(sin(i/18*stepangle+stepangle/2));

    sidevertices[i+15]=topcenter.x()+float(double(radius)*cos(i/18*stepangle+stepangle));
    sidevertices[i+16]=topcenter.y();
    sidevertices[i+17]=topcenter.z()+float(double(radius)*sin(i/18*stepangle+stepangle));
    sidenormals [i+15]=float(cos(i/18*stepangle+stepangle/2));
    sidenormals [i+16]=0.0;
    sidenormals [i+17]=float(sin(i/18*stepangle+stepangle/2));
}

//sphere
for(int i=0;i<longitudeCount*3*3;i+=9) {
    southvertices[i  ]=south.x();
    southvertices[i+1]=south.y();
    southvertices[i+2]=south.z();

    southvertices[i+3]=radius*float(sin(latitudeStep))*float(cos(i/9*longitudeStep));
    southvertices[i+4]=center.y()-radius*float(cos(latitudeStep));
    southvertices[i+5]=radius*float(sin(latitudeStep))*float(sin(i/9*longitudeStep));

    southvertices[i+6]=radius*float(sin(latitudeStep))*float(cos(i/9*longitudeStep+longitudeStep));
    southvertices[i+7]=center.y()-radius*float(cos(latitudeStep));
    southvertices[i+8]=radius*float(sin(latitudeStep))*float(sin(i/9*longitudeStep+longitudeStep));

//        southvertices[i+3]=grid[i/9%longitudeCount].x();
//        southvertices[i+4]=grid[i/9%longitudeCount].y();
//        southvertices[i+5]=grid[i/9%longitudeCount].z();

//        southvertices[i+6]=grid[(i/9+1)%longitudeCount].x();
//        southvertices[i+7]=grid[(i/9+1)%longitudeCount].y();
//        southvertices[i+8]=grid[(i/9+1)%longitudeCount].z();
    QVector3D normal;
    QVector3D v[3];
    v[0]=QVector3D(southvertices[i  ],southvertices[i+1],southvertices[i+2]);
    v[1]=QVector3D(southvertices[i+3],southvertices[i+4],southvertices[i+5]);
    v[2]=QVector3D(southvertices[i+6],southvertices[i+7],southvertices[i+8]);
    normal=QVector3D::normal(v[0],v[1],v[2]);
    southnormals[i  ]=normal.x();
    southnormals[i+1]=normal.y();
    southnormals[i+2]=normal.z();

    southnormals[i+3]=normal.x();
    southnormals[i+4]=normal.y();
    southnormals[i+5]=normal.z();

    southnormals[i+6]=normal.x();
    southnormals[i+7]=normal.y();
    southnormals[i+8]=normal.z();
}
for(int i=0;i<longitudeCount*3*3;i+=9) {
    northvertices[i  ]=north.x();
    northvertices[i+1]=north.y();
    northvertices[i+2]=north.z();

    northvertices[i+3]=radius*float(sin(latitudeStep))*float(cos(i/9*longitudeStep));
    northvertices[i+4]=center.y()+radius*float(cos(latitudeStep));
    northvertices[i+5]=radius*float(sin(latitudeStep))*float(sin(i/9*longitudeStep));

    northvertices[i+6]=radius*float(sin(latitudeStep))*float(cos(i/9*longitudeStep+longitudeStep));
    northvertices[i+7]=center.y()+radius*float(cos(latitudeStep));
    northvertices[i+8]=radius*float(sin(latitudeStep))*float(sin(i/9*longitudeStep+longitudeStep));

    QVector3D normal;
    QVector3D v[3];
    v[0]=QVector3D(northvertices[i  ],northvertices[i+1],northvertices[i+2]);
    v[1]=QVector3D(northvertices[i+3],northvertices[i+4],northvertices[i+5]);
    v[2]=QVector3D(northvertices[i+6],northvertices[i+7],northvertices[i+8]);
    normal=QVector3D::normal(v[0],v[1],v[2]);
    northnormals[i  ]=normal.x();
    northnormals[i+1]=normal.y();
    northnormals[i+2]=normal.z();

    northnormals[i+3]=normal.x();
    northnormals[i+4]=normal.y();
    northnormals[i+5]=normal.z();

    northnormals[i+6]=normal.x();
    northnormals[i+7]=normal.y();
    northnormals[i+8]=normal.z();
}
for(int i=0;i<latitudeCount-1;i++) {
    for(int j=0;j<longitudeCount*2*3*3;j+=18) {
//            qDebug() << "debug82" << i << i*longitudeCount*2*3*3;
        QVector3D normal;
        QVector3D v[3];
        //---------------------first face---------------------
        sidevertices[i*longitudeCount*2*3*3+j   ]=grid[i*longitudeCount+((j/18+1)%longitudeCount)].x();
        sidevertices[i*longitudeCount*2*3*3+j+ 1]=grid[i*longitudeCount+((j/18+1)%longitudeCount)].y();
        sidevertices[i*longitudeCount*2*3*3+j+ 2]=grid[i*longitudeCount+((j/18+1)%longitudeCount)].z();

        sidevertices[i*longitudeCount*2*3*3+j+ 3]=grid[i*longitudeCount+(j/18%longitudeCount)].x();
        sidevertices[i*longitudeCount*2*3*3+j+ 4]=grid[i*longitudeCount+(j/18%longitudeCount)].y();
        sidevertices[i*longitudeCount*2*3*3+j+ 5]=grid[i*longitudeCount+(j/18%longitudeCount)].z();

        sidevertices[i*longitudeCount*2*3*3+j+ 6]=grid[(i+1)*longitudeCount+((j/18+1)%longitudeCount)].x();
        sidevertices[i*longitudeCount*2*3*3+j+ 7]=grid[(i+1)*longitudeCount+((j/18+1)%longitudeCount)].y();
        sidevertices[i*longitudeCount*2*3*3+j+ 8]=grid[(i+1)*longitudeCount+((j/18+1)%longitudeCount)].z();

        //---------------------second face---------------------
        sidevertices[i*longitudeCount*2*3*3+j+ 9]=grid[(i+1)*longitudeCount+((j/18+1)%longitudeCount)].x();
        sidevertices[i*longitudeCount*2*3*3+j+10]=grid[(i+1)*longitudeCount+((j/18+1)%longitudeCount)].y();
        sidevertices[i*longitudeCount*2*3*3+j+11]=grid[(i+1)*longitudeCount+((j/18+1)%longitudeCount)].z();

        sidevertices[i*longitudeCount*2*3*3+j+12]=grid[i*longitudeCount+(j/18%longitudeCount)].x();
        sidevertices[i*longitudeCount*2*3*3+j+13]=grid[i*longitudeCount+(j/18%longitudeCount)].y();
        sidevertices[i*longitudeCount*2*3*3+j+14]=grid[i*longitudeCount+(j/18%longitudeCount)].z();

        sidevertices[i*longitudeCount*2*3*3+j+15]=grid[(i+1)*longitudeCount+(j/18%longitudeCount)].x();
        sidevertices[i*longitudeCount*2*3*3+j+16]=grid[(i+1)*longitudeCount+(j/18%longitudeCount)].y();
        sidevertices[i*longitudeCount*2*3*3+j+17]=grid[(i+1)*longitudeCount+(j/18%longitudeCount)].z();

        //---------------------first noramls---------------------
        v[0]=QVector3D(sidevertices[i*longitudeCount*2*3*3+j   ],sidevertices[i*longitudeCount*2*3*3+j+ 1],sidevertices[i*longitudeCount*2*3*3+j+ 2]);
        v[1]=QVector3D(sidevertices[i*longitudeCount*2*3*3+j+ 3],sidevertices[i*longitudeCount*2*3*3+j+ 4],sidevertices[i*longitudeCount*2*3*3+j+ 5]);
        v[2]=QVector3D(sidevertices[i*longitudeCount*2*3*3+j+ 6],sidevertices[i*longitudeCount*2*3*3+j+ 7],sidevertices[i*longitudeCount*2*3*3+j+ 8]);
        normal=QVector3D::normal(v[0],v[1],v[2]);

        sidenormals[i*longitudeCount*2*3*3+j   ]=normal.x();
        sidenormals[i*longitudeCount*2*3*3+j+ 1]=normal.y();
        sidenormals[i*longitudeCount*2*3*3+j+ 2]=normal.z();

        sidenormals[i*longitudeCount*2*3*3+j+ 3]=normal.x();
        sidenormals[i*longitudeCount*2*3*3+j+ 4]=normal.y();
        sidenormals[i*longitudeCount*2*3*3+j+ 5]=normal.z();

        sidenormals[i*longitudeCount*2*3*3+j+ 6]=normal.x();
        sidenormals[i*longitudeCount*2*3*3+j+ 7]=normal.y();
        sidenormals[i*longitudeCount*2*3*3+j+ 8]=normal.z();

        //---------------------second noramls---------------------
        v[0]=QVector3D(sidevertices[i*longitudeCount*2*3*3+j+ 9],sidevertices[i*longitudeCount*2*3*3+j+10],sidevertices[i*longitudeCount*2*3*3+j+11]);
        v[1]=QVector3D(sidevertices[i*longitudeCount*2*3*3+j+12],sidevertices[i*longitudeCount*2*3*3+j+13],sidevertices[i*longitudeCount*2*3*3+j+14]);
        v[2]=QVector3D(sidevertices[i*longitudeCount*2*3*3+j+15],sidevertices[i*longitudeCount*2*3*3+j+16],sidevertices[i*longitudeCount*2*3*3+j+17]);
        normal=QVector3D::normal(v[0],v[1],v[2]);

        sidenormals[i*longitudeCount*2*3*3+j+ 9]=normal.x();
        sidenormals[i*longitudeCount*2*3*3+j+10]=normal.y();
        sidenormals[i*longitudeCount*2*3*3+j+11]=normal.z();

        sidenormals[i*longitudeCount*2*3*3+j+12]=normal.x();
        sidenormals[i*longitudeCount*2*3*3+j+13]=normal.y();
        sidenormals[i*longitudeCount*2*3*3+j+14]=normal.z();

        sidenormals[i*longitudeCount*2*3*3+j+15]=normal.x();
        sidenormals[i*longitudeCount*2*3*3+j+16]=normal.y();
        sidenormals[i*longitudeCount*2*3*3+j+17]=normal.z();
    }
}
